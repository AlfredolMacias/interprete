package JavaApplication1;
import static JavaApplication1.Cara.lista;
import analizadores.Yylex;
import analizadores.parser;
import analizadores.parser;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.TextArea;
import java.awt.geom.QuadCurve2D;
import java.beans.PropertyChangeEvent;
import java.io.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import JavaApplication1.Cara;
import java.awt.Color;
import javax.swing.Timer;


/**
 *
 * @author Fredy-pc
 */
public class NewJFrame extends javax.swing.JFrame {
    private String error;
     ArrayList<Carita> carita = new ArrayList<Carita>();
     Iterator<Objeto> iter;
     Iterator<Objeto> iterador;
    static ArrayList<Objeto> lista = new ArrayList<Objeto>();
    int delay = 1000;
    Timer timer = new Timer(delay, null);
    /**
     * Creates new form NewJFrame
     */
    boolean check = true;
    public NewJFrame() {
        initComponents();
    }
    
    void getTextArea1(String r){
        textArea1.setText(r);
    }
    public void main(){
        repaint();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        textArea3 = new java.awt.TextArea();
        textArea1 = new java.awt.TextArea();
        jButton4 = new javax.swing.JButton();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Archivo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Revisar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Salir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Ejecutar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textArea1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(727, 727, 727)
                        .addComponent(textArea3, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(58, 58, 58)
                        .addComponent(jButton2)
                        .addGap(40, 40, 40)
                        .addComponent(jButton4)
                        .addGap(35, 35, 35)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textArea3, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        textArea1.setText("");        
        guardar();
        try {
            new JavaApplication1(0);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        //allPeople();
        //carita.add(new Carita(50,40,29,"Alfredo",1));
        allPeople2();    
        
        
        repaint();
        setText();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    JavaApplication1 j = new JavaApplication1();
     void setText(){
        String error = j.error();
        textArea1.setText(error + " \n");
        
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            abrir();
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed
    private void newButton(){
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        setText();
    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        setText();
    }//GEN-LAST:event_jButton4ActionPerformed
 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

  public void guardar(){
        String fileName = "entrada.txt";
            FileWriter fileWriter;
        try {
            fileWriter = new FileWriter(fileName);
            fileWriter.write(textArea3.getText());
            fileWriter.close();   
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error: " + ex.toString());
        }
    }   
  

  public void abrir() throws IOException{
      String aux="";   
      try
      {
        /**llamamos el metodo que permite cargar la ventana*/
        JFileChooser file=new JFileChooser();
        file.showOpenDialog(this);
        /**abrimos el archivo seleccionado*/
        File abre=file.getSelectedFile();

       /**recorremos el archivo, lo leemos para plasmarlo
       *en el area de texto*/
        if(abre!=null)
        {   
           textArea3.setText("");
           FileReader archivos=new FileReader(abre);
           BufferedReader lee=new BufferedReader(archivos);
           while((aux=lee.readLine())!=null)
           {
              textArea3.append(aux+"\r\n");
           }
              lee.close();
        }    
       }
       catch(IOException ex)
       {
         JOptionPane.showMessageDialog(null,ex+"" +
               "\nNo se ha encontrado el archivo",
                     "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
        }
      
  }
  @Override
    public void paint(Graphics g){
        Graphics2D g2d = (Graphics2D) g;
        super.paint(g);
        g.setColor(Color.white);
        g.fillRect(20, 50, 720, 465);
        g.setColor(Color.black);
        for(int i=0; i<lista.size(); i++){
            boolean bN = buscarNombre(lista.get(i).get_NombreCara());
            System.out.println(" Inst: " + lista.get(i).getInst());
            boolean choca = choca(lista.get(i));
            System.out.println("Choca: hjknubfnobnonofi" + choca);
            if(lista.get(i).getInst().equals("DibujarCara")){
                if(!choca){
                    if(!bN){
                     lista.get(i).setEliminado(false);
                int x = lista.get(i).get_x()+20;
                int y = lista.get(i).get_y()+50;
                int r = lista.get(i).get_radio();
                String nom = lista.get(i).get_NombreCara();
                String type = lista.get(i).get_Modo();
                if(((x-r)-20) >=0 && ((y-r)-50) >=0 && (((x+r)-20) <= 700 && ((y+r)-50) <= 400)){
                int x2 = (x-r)+(r*45)/100;
                int y2 = (y-r)+(r*50)/100;
                int x3 = (x-r)+(r*120)/100;
                int xN = (x-r)+(r*80)/100;
                int yN = (y-r)+(r*25)/100;
                int r2 = (r*40)/100;
                g.drawOval(x-r,y-r,r*2,r*2);
                g.setFont(new Font("TimesRoman", Font.PLAIN, ((r*15)/100)));
                switch(type){
                    // Feliz
                    case "feliz":
                        g.fillOval(x2,y2,r2,r2);
                        g.fillOval(x3,y2,r2,r2);
                        g.drawString(nom, xN, yN);
                        int xBF1 = (x-r)+(r*50)/100;
                        int yBF1 = (y-r)+(r*120)/100;
                        int xBF2 = x;
                        int yBF2 = (y-r)+(r*170)/100;
                        int xBF3 = (x-r)+(r*150)/100;
                        QuadCurve2D bocaF1 = new QuadCurve2D.Float(xBF1, yBF1, xBF2, yBF2, xBF3, yBF1);
                        g2d.draw(bocaF1);
                        g2d.fill(bocaF1);
                        break;
                    // Triste
                    case "triste":
                        g.fillOval(x2,y2,r2,r2);
                        g.fillOval(x3, y2, r2, r2);
                        g.drawString(nom, xN, yN);
                        int xBT1 = (x-r)+(r*50)/100;
                        int yBT1 = (y-r)+(r*150)/100;
                        int xBT2 = x;
                        int yBT2 = (y-r)+(r*100)/100;
                        int xBT3 = (x-r)+(r*150)/100;
                        QuadCurve2D bocaT1 = new QuadCurve2D.Float(xBT1, yBT1, xBT2, yBT2, xBT3, yBT1);
                        g2d.draw(bocaT1);
                        g2d.fill(bocaT1);
                        break;
                    // Enojado
                    case "enojada":
                        int yNE = (y-r)+(r*35)/100;
                        g.drawString(nom, xN, yNE);
                        int yBE1 = (y-r)+(r*60)/100;
                        int xBE1 = (x-r)+(r*65)/100;
                        int yBE2 = y;
                        int xBE2 = (x-r)+(r*95)/100;
                        int yBE3 = (y-r)+(r*80)/100;
                        QuadCurve2D ojoE1 = new QuadCurve2D.Float(x2, yBE1, xBE1, yBE2, xBE2, yBE3);
                        g2d.draw(ojoE1);
                        g2d.fill(ojoE1);
                        int xBE3 = (x-r)+(r*110)/100;
                        int xBE4 = (x-r)+(r*140)/100;
                        int xBE5 = (x-r)+(r*160)/100;
                        QuadCurve2D ojoE2 = new QuadCurve2D.Float(xBE3, yBE3, xBE4, yBE2, xBE5, yBE1);
                        g2d.draw(ojoE2);
                        g2d.fill(ojoE2);
                        int xBE6 = (x-r)+(r*50)/100;
                        int yBE4 = (y-r)+(r*150)/100;
                        int xBE7 = x;
                        int yBE5 = (y-r)+(r*100)/100;
                        int xBE8 = (x-r)+(r*150)/100;
                        QuadCurve2D bocaE1 = new QuadCurve2D.Float(xBE6, yBE4, xBE7, yBE5, xBE8, yBE4);
                        g2d.draw(bocaE1);
                        g2d.fill(bocaE1);
                        break;
                    // Dormido
                    case "dormida":
                        int yND = (y-r)+(r*35)/100;
                        g.drawString(nom, xN, yND);
                        int yBD1 = (y-r)+(r*60)/100;
                        int xBD1 = (x-r)+(r*70)/100;
                        int yBD2 = y;
                        int xBD2 = (x-r)+(r*95)/100;
                        QuadCurve2D ojoD1 = new QuadCurve2D.Float(x2, yBD1, xBD1, yBD2, xBD2, yBD1);
                        g2d.draw(ojoD1);
                        g2d.fill(ojoD1);
                        int xBD3 = (x-r)+(r*110)/100;
                        int xBD4 = (x-r)+(r*135)/100;
                        int xBD5 = (x-r)+(r*160)/100;
                        QuadCurve2D ojoD2 = new QuadCurve2D.Float(xBD3, yBD1, xBD4, yBD2, xBD5, yBD1);
                        g2d.draw(ojoD2);
                        g2d.fill(ojoD2);
                        int xBD6 = (x-r)+(r*80)/100;
                        int yBD4 = (y-r)+(r*120)/100;
                        int rBD1 = (r*40)/100;
                        g.fillOval(xBD6,yBD4,rBD1,rBD1);
                        break;
                    // Neutral
                    case "neutral":
                        g.fillOval(x2,y2,r2,r2);
                        g.fillOval(x3,y2, r2, r2);
                        g.drawString(nom, xN, yN);
                        int xBN1 = (x-r)+(r*50)/100;
                        int yBN1 = (y-r)+(r*140)/100;
                        g.fillRect(xBN1,yBN1,r,((r*10)/100));
                        break;
                    default:
                        break;
                }
                }else{
                    System.out.println("Las Dimensiones de la figura exceden las dimensiones del Canvas");
                    System.exit(0);
                }       
                    }else{
                        System.out.println("Ese nombre ya existe");
                    }
                }else{
                    System.out.println("Las Caras chocan");
                }
                
            }else if(lista.get(i).getInst().equals("EliminarCara")){
                Objeto n = BuscarCara(lista.get(i).get_NombreCara());
                int x = n.get_x()+20;
                int y = n.get_y()+50;
                int r = n.get_radio();
                g.setColor(Color.white);
                g.fillRect((x-r), (y-r), (r*2)+5, (r*2)+5);
                g.setColor(Color.black);
                EliminarObE(lista.get(i).get_NombreCara());                
            }else if(lista.get(i).getInst().equals("CambiarModo")){
                Objeto n = BuscarCara(lista.get(i).get_NombreCara());
                n.setModo(lista.get(i).get_Modo());
                
                int x = n.get_x()+20;
                int y = n.get_y()+50;
                int r = n.get_radio();
                g.setColor(Color.white);
                g.fillRect((x-r), (y-r), (r*2), (r*2));
                g.setColor(Color.black);
                
                int nx = x;
                int ny = y;
                int nr = r;
                String nom = lista.get(i).get_NombreCara();
                String type = lista.get(i).get_Modo();
                if(((nx-nr)-20) >=0 && ((ny-nr)-50) >=0 && (((nx+nr)-20) <= 700 && ((ny+nr)-50) <= 400)){
                int x2 = (nx-nr)+(nr*45)/100;
                int y2 = (ny-nr)+(nr*50)/100;
                int x3 = (nx-nr)+(nr*120)/100;
                int xN = (nx-nr)+(nr*80)/100;
                int yN = (ny-nr)+(nr*25)/100;
                int r2 = (nr*40)/100;
                g.drawOval(nx-nr,ny-nr,nr*2,nr*2);
                g.setFont(new Font("TimesRoman", Font.PLAIN, ((nr*15)/100)));
                switch(type){
                    // Feliz
                    case "feliz":
                        g.fillOval(x2,y2,r2,r2);
                        g.fillOval(x3,y2,r2,r2);
                        g.drawString(nom, xN, yN);
                        int xBF1 = (nx-nr)+(nr*50)/100;
                        int yBF1 = (ny-nr)+(nr*120)/100;
                        int xBF2 = nx;
                        int yBF2 = (ny-nr)+(nr*170)/100;
                        int xBF3 = (nx-nr)+(nr*150)/100;
                        QuadCurve2D bocaF1 = new QuadCurve2D.Float(xBF1, yBF1, xBF2, yBF2, xBF3, yBF1);
                        g2d.draw(bocaF1);
                        g2d.fill(bocaF1);
                        break;
                    // Triste
                    case "triste":
                        g.fillOval(x2,y2,r2,r2);
                        g.fillOval(x3, y2, r2, r2);
                        g.drawString(nom, xN, yN);
                        int xBT1 = (nx-nr)+(nr*50)/100;
                        int yBT1 = (ny-nr)+(nr*150)/100;
                        int xBT2 = nx;
                        int yBT2 = (ny-nr)+(nr*100)/100;
                        int xBT3 = (nx-nr)+(nr*150)/100;
                        QuadCurve2D bocaT1 = new QuadCurve2D.Float(xBT1, yBT1, xBT2, yBT2, xBT3, yBT1);
                        g2d.draw(bocaT1);
                        g2d.fill(bocaT1);
                        break;
                    // Enojado
                    case "enojada":
                        int yNE = (ny-nr)+(nr*35)/100;
                        g.drawString(nom, xN, yNE);
                        int yBE1 = (ny-nr)+(nr*60)/100;
                        int xBE1 = (nx-nr)+(nr*65)/100;
                        int yBE2 = ny;
                        int xBE2 = (nx-nr)+(nr*95)/100;
                        int yBE3 = (ny-nr)+(nr*80)/100;
                        QuadCurve2D ojoE1 = new QuadCurve2D.Float(x2, yBE1, xBE1, yBE2, xBE2, yBE3);
                        g2d.draw(ojoE1);
                        g2d.fill(ojoE1);
                        int xBE3 = (nx-nr)+(nr*110)/100;
                        int xBE4 = (nx-nr)+(nr*140)/100;
                        int xBE5 = (nx-nr)+(nr*160)/100;
                        QuadCurve2D ojoE2 = new QuadCurve2D.Float(xBE3, yBE3, xBE4, yBE2, xBE5, yBE1);
                        g2d.draw(ojoE2);
                        g2d.fill(ojoE2);
                        int xBE6 = (nx-nr)+(nr*50)/100;
                        int yBE4 = (ny-nr)+(nr*150)/100;
                        int xBE7 = nx;
                        int yBE5 = (ny-nr)+(nr*100)/100;
                        int xBE8 = (nx-nr)+(nr*150)/100;
                        QuadCurve2D bocaE1 = new QuadCurve2D.Float(xBE6, yBE4, xBE7, yBE5, xBE8, yBE4);
                        g2d.draw(bocaE1);
                        g2d.fill(bocaE1);
                        break;
                    // Dormido
                    case "dormida":
                        int yND = (ny-nr)+(nr*35)/100;
                        g.drawString(nom, xN, yND);
                        int yBD1 = (ny-nr)+(nr*60)/100;
                        int xBD1 = (nx-nr)+(nr*70)/100;
                        int yBD2 = ny;
                        int xBD2 = (nx-nr)+(nr*95)/100;
                        QuadCurve2D ojoD1 = new QuadCurve2D.Float(x2, yBD1, xBD1, yBD2, xBD2, yBD1);
                        g2d.draw(ojoD1);
                        g2d.fill(ojoD1);
                        int xBD3 = (nx-nr)+(nr*110)/100;
                        int xBD4 = (nx-nr)+(nr*135)/100;
                        int xBD5 = (nx-nr)+(nr*160)/100;
                        QuadCurve2D ojoD2 = new QuadCurve2D.Float(xBD3, yBD1, xBD4, yBD2, xBD5, yBD1);
                        g2d.draw(ojoD2);
                        g2d.fill(ojoD2);
                        int xBD6 = (nx-nr)+(nr*80)/100;
                        int yBD4 = (ny-nr)+(nr*120)/100;
                        int rBD1 = (nr*40)/100;
                        g.fillOval(xBD6,yBD4,rBD1,rBD1);
                        break;
                    // Neutral
                    case "neutral":
                        g.fillOval(x2,y2,r2,r2);
                        g.fillOval(x3,y2, r2, r2);
                        g.drawString(nom, xN, yN);
                        int xBN1 = (nx-nr)+(nr*50)/100;
                        int yBN1 = (ny-nr)+(nr*140)/100;
                        g.fillRect(xBN1,yBN1,nr,((nr*10)/100));
                        break;
                    default:
                        break;
                }
                }else{
                    System.out.println("Las Dimensiones de la figura exceden las dimensiones del Canvas");
                    System.exit(0);
                }
                
            }else if(lista.get(i).getInst().equals("Dormir")){
                try {
                    Thread.sleep(lista.get(i).getSegundos()*1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        carita.clear();
        lista.clear();
    }
    public Objeto BuscarCara(String nom){
        for(Objeto a : lista){
            if(a.get_NombreCara().equals(nom) && !a.getEliminado()){
                return a;
            }
        }
        return null;
    }
    public void EliminarObE(String nom){
        iter = lista.iterator();
        boolean df =false;
        boolean d =false;
        while(iter.hasNext()){
            Objeto e = iter.next();
            if(e.get_NombreCara().equals(nom) && e.getInst().equals("EliminarCara")){
                e.setEliminado(true);
                d = true;
            }else if(e.get_NombreCara().equals(nom) && e.getInst().equals("DibujarCara")){
                e.setEliminado(true);
                df = true;
            }
            if(d && df){
                break;
            }
        }
    }
   
    static public void ingresarLista(Objeto ob){
        lista.add(ob);
    }
    public boolean buscarNombre(String nombre){
        System.out.println("BUSCAR NOMBRE-----------");
        for(Objeto a: lista){
            System.out.println("Instruccion: " + a.getInst() + "   Nombre " + a.get_NombreCara());
            if(a.get_NombreCara().equals(nombre) && a.getInst().equals("DibujarCara") && !a.getEliminado()){
                return true;
            }
        }
        return false;
    }
    public void allPeople2(){
        for(Objeto a: lista){
            System.out.println("Instr: " + a.getInst());
        }
           System.out.println("----------------------");
    }
    
    public boolean choca(Objeto nuevo){
        for(Objeto e : lista){
            if(e.get_NombreCara().equals(nuevo.get_NombreCara())){
                
            }else{
            if(e.getInst().equals("DibujarCara") && !e.getEliminado()){
                int x1 = e.get_x()-e.get_radio();
                int y1 = e.get_y()-e.get_radio(); 
                int x2 = e.get_x()+e.get_radio(); 
                int y2 = e.get_y()+e.get_radio();
                
                int nx1 = nuevo.get_x() - nuevo.get_radio();
                int ny1 = nuevo.get_y() - nuevo.get_radio();
                int nx2 = nuevo.get_x() + nuevo.get_radio();
                int ny2 = nuevo.get_y() + nuevo.get_radio();
                
                System.out.println("x1: " + x1 + " x2: " + x2 + " y1: " + y1 + " y2: " + y2);
                System.out.println("nx1: " + nx1 + " nx2: " + nx2 + " ny1: " + ny1 + " ny2: " + ny2);
                
                if((nx1 >= x1 && nx1 <= x2 && ny1 >= y1 && ny1 <= y2) ||
                        (nx1 >= x1 && nx1 <= x2 && ny2 >= y1 && ny2 <= y2) ||
                        (nx2 >= x1 && nx2 <= x2 && ny2 >= y1 && ny2 <= y2) ||
                        (nx2 >= x1 && nx2 <= x2 && ny1 >= y1 && ny1 <= y2)){
                        return true;
                }
            }
        }
        }
        return false;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JFrame jFrame1;
    private java.awt.TextArea textArea1;
    private java.awt.TextArea textArea3;
    // End of variables declaration//GEN-END:variables

}
